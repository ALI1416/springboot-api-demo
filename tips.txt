Gradle配置

allprojects {
    repositories {
        // 本地仓库
        mavenLocal()
        // 阿里云central和jCenter仓库的聚合仓库
        maven { url "https://maven.aliyun.com/repository/public" }
        // central仓库
        mavenCentral()
        // jCenter仓库
        jcenter()
    }
}


Git命令行指引

Git全局设置
git config --global user.name "姓名"
git config --global user.email "邮箱"

使用https替代git来获取资源
git config --global url."https://".insteadOf git://


克隆仓库：
git clone 地址
cd 目录
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

已有文件夹或仓库：
cd 已存在目录
git init
git remote add origin 地址
git add .
git commit
git push -u origin master

导入代码库：
git clone --bare 代码库地址 路径
cd 路径
git remote set-url origin 地址
git push --mirror


分支：
创建一个分支，并切换过去
git checkout -b 名称
切换回主分支
git checkout master
删掉分支
git branch -d 名称
推送分支
git push origin 名称


更新与合并：
要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，你可以使用如下命令预览差异：
git diff <source_branch> <target_branch>


标签：
为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：
git log
你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。


替换本地改动：
假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。
假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：
git fetch origin
git reset --hard origin/master

